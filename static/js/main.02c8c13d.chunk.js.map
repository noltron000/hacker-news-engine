{"version":3,"sources":["react-logo.svg","components/Header.jsx","redux.js","components/Searchbar.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["Header","src","logo","className","alt","href","target","rel","reducers","combineReducers","search","state","action","type","store","initialState","createStore","configureStore","Searchbar","onSubmit","event","a","promise","fetch","query","preventDefault","queries","props","response","json","results","activateSearch","name","value","this","onChange","setState","Component","mapDispatchToProps","SearchbarContainer","connect","App","JSON","stringify","AppContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAAe,G,MAAA,IAA0B,wC,eCsC1BA,MAlCf,WACC,OACC,mCACC,qBACCC,IAAKC,EACLC,UAAU,OACVC,IAAI,SAGL,sBAAKD,UAAU,QAAf,UACC,oBAAIA,UAAU,SAAd,gCAGA,8EAEC,uBAFD,oBAIE,IACD,mBACCE,KAAK,mDACLC,OAAO,SACPC,IAAI,sBAHL,yCAOC,OAEF,6B,wCCUEC,EAAWC,YAAgB,CAACC,OAnBnB,WAKT,IAHLC,EAGI,uDAHI,CAAC,QAAW,GAAK,QAAW,IAEpCC,EACI,uCAGJ,MAAqB,qBAAX,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQC,MACJD,EAAOF,OAKPC,KAiBT,IAAMG,EANN,WAA4C,IAApBC,EAAmB,uDAAJ,GAChCD,EAAQE,YAAYR,EAAUO,GACpC,OAAOD,EAIMG,GC7CRC,G,wDACL,aAAgB,IAAD,8BACd,gBACKP,MAAQ,CAAC,MAAS,IAFT,E,0CAKf,WAAW,IAAD,OAAE,OAAQ,mCACnB,sBACCQ,SAAQ,uCAAE,WAAOC,GAAP,qBAAAC,EAAA,6DAGHC,EAAUC,MAAM,8CAAD,OAA+C,EAAKZ,MAAMa,QAG/EJ,EAAMK,iBAGAC,EATG,sBASW,EAAKC,MAAMjB,OAAOgB,SAT7B,CASsC,EAAKf,MAAMa,QATjD,SAYcF,EAZd,cAYHM,EAZG,gBAaaA,EAASC,OAbtB,OAaHC,EAbG,OAgBT,EAAKH,MAAMI,eAAe,CAGzB,QAAWL,EAEX,QAAWI,IArBH,4CAAF,sDADT,SA4BC,gCACC,uDAIA,uBAEA,uBACCE,KAAK,YACLnB,KAAK,SACLoB,MAAOC,KAAKvB,MAAMa,MAElBW,SAAU,SAACf,GACV,EAAKgB,SAAS,CACb,MAAShB,EAAMd,OAAO2B,WAKzB,uBACCD,KAAK,eACLnB,KAAK,SACLoB,MAAM,sB,GAzDaI,cA2ElBC,EAAqB,CAEzBP,eD7EqB,SAACrB,GAQvB,MANqB,CACpB,KAAQ,kBACR,OAAUA,KCmFG6B,EAPYC,aAfH,SAAC7B,GAOxB,MALc,CACZD,OAAQC,EAAMD,UAcf4B,EAFyBE,CAGzBtB,GCnFIuB,E,kDACL,aAAgB,IAAD,8BACd,gBACK9B,MAAQ,CAAC,GAAM,MAFN,E,0CAKf,WAAW,OACV,qCACC,cAAC,EAAD,IACA,iCACC,cAAC,EAAD,IACA,uBAEA,gDACA,8BAAK,+BAAO+B,KAAKC,UAAUT,KAAKP,MAAMjB,OAAOgB,aAE7C,8CACA,8BAAK,+BAAOgB,KAAKC,UAAUT,KAAKP,MAAMjB,OAAOoB,QAAS,KAAM,oB,GAjB9CO,aAsCHO,EAJMJ,aAVG,SAAC7B,GAOxB,MALc,CACZD,OAAQC,EAAMD,UAOI8B,CAEnBC,GChCaI,EAZS,SAAAC,GACnBA,GAAeA,aAAuBC,UACzC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCXQ,IAASC,OACR,cAAC,IAAD,CAAUzC,MAAOA,EAAjB,SACC,cAAC,IAAM0C,WAAP,UACC,cAAC,EAAD,QAGFC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.02c8c13d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-logo.647fdf98.svg\";","// import styles & other objects\nimport logo from '../react-logo.svg'\nimport './Header.css'\n\nfunction Header() {\n\treturn (\n\t\t<header>\n\t\t\t<img\n\t\t\t\tsrc={logo}\n\t\t\t\tclassName=\"logo\"\n\t\t\t\talt=\"logo\"\n\t\t\t/>\n\n\t\t\t<div className=\"title\">\n\t\t\t\t<h1 className=\"center\">\n\t\t\t\t\tHacker News Engine\n\t\t\t\t</h1>\n\t\t\t\t<p>\n\t\t\t\t\tBuilt with React, Redux, and the Algolia API.\n\t\t\t\t\t<br />\n\t\t\t\t\tFor more details,\n\t\t\t\t\t{\" \"}\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"https://github.com/noltron000/hacker-news-engine\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\tview this project on Github\n\t\t\t\t\t</a>\n\t\t\t\t\t{\".\"}\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</header>\n\t)\n}\n\nexport default Header\n","import {\n\tcombineReducers,\n\tcreateStore,\n} from 'redux'\n\n\n/* ACTIONS */\n// check this out when the search bar is clicked.\nconst activateSearch = (search) => {\n\t// create action object with a type label and its content.\n\tconst actionObject = {\n\t\t'type': 'ACTIVATE_SEARCH',\n\t\t'search': search,\n\t}\n\n\t// that's all we need.\n\treturn actionObject\n}\n\n\n/* REDUCERS */\n// bindle all possible actions for the search.\nconst search = (\n\t// 'state' param has a nice default object set up.\n\tstate = {'queries': [ ], 'results': { }},\n\t// 'action' param won't get hit if it isn't used.\n\taction\n) => {\n\n\t// there's only one possible action type for queries.\n\tif (action?.type === 'ACTIVATE_SEARCH') {\n\t\treturn action.search\n\t}\n\n\t// if there's no matching labels, do nothing extra.\n\telse {\n\t\treturn state\n\t}\n}\n\n// bundle together all reducers.\nconst reducers = combineReducers({search})\n\n\n/* STORE */\n// we're required to use a verbose f(x) behind the scenes.\n// verbose meaning, we use the 'function' keyword.\nfunction configureStore(initialState = {}) {\n\tconst store = createStore(reducers, initialState)\n\treturn store\n}\n\n// bundle up together the store\nconst store = configureStore()\n\n\n/* EXPORT */\nexport {\n\tactivateSearch,\n\tsearch,\n\treducers,\n\tconfigureStore,\n\tstore\n}\n","// import styles & other objects\nimport {connect} from 'react-redux'\nimport {activateSearch} from '../redux.js'\nimport './Searchbar.css'\n// import components\nimport {Component} from 'react'\n\n/* CREATE BASE CLASS */\nclass Searchbar extends Component {\n\tconstructor () {\n\t\tsuper()\n\t\tthis.state = {'query': ''}\n\t}\n\n\trender () { return (<>\n\t\t<form\n\t\t\tonSubmit={async (event) => {\n\t\t\t\t// fetch some stuff from the API.\n\t\t\t\t// its going to be a promise, so we'll await it later.\n\t\t\t\tconst promise = fetch(`https://hn.algolia.com/api/v1/search?query=${this.state.query}`)\n\n\t\t\t\t// don't allow the site to reload after submitting.\n\t\t\t\tevent.preventDefault()\n\n\t\t\t\t// add current query to redux history.\n\t\t\t\tconst queries = [...this.props.search.queries, this.state.query]\n\n\t\t\t\t// re-visit promises and await completion.\n\t\t\t\tconst response = await promise\n\t\t\t\tconst results = await response.json()\n\n\t\t\t\t// tell redux that we have new search data.\n\t\t\t\tthis.props.activateSearch({\n\t\t\t\t\t// 'queries' is historic array of query entries.\n\t\t\t\t\t// the most recent query is listed at the end.\n\t\t\t\t\t'queries': queries,\n\t\t\t\t\t// 'results' is fetched data for this query.\n\t\t\t\t\t'results': results,\n\t\t\t\t})\n\t\t\t}}\n\t\t>\n\n\t\t\t{/* Here is the searchbar's HTML. */}\n\t\t\t<div>\n\t\t\t\t<label>\n\t\t\t\t\tSearch Hacker News\n\t\t\t\t</label>\n\n\t\t\t\t<br />\n\n\t\t\t\t<input\n\t\t\t\t\tname=\"searchbar\"\n\t\t\t\t\ttype=\"search\"\n\t\t\t\t\tvalue={this.state.query}\n\n\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t'query': event.target.value\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<input\n\t\t\t\t\tname=\"searchButton\"\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tvalue=\"Search\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</form>\n\t</>)}\n}\n\n/* EXTEND OBJECT INTO REDUX CONTAINER */\nconst mapStateToProps = (state) => {\n\t// create props from state\n\tconst props = {\n  \tsearch: state.search,\n\t}\n\n\t// return props\n\treturn props\n}\n\nconst mapDispatchToProps = {\n\t// \"dispatch\" bundled functions to incoming class context.\n  activateSearch,\n}\n\nconst SearchbarContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Searchbar)\n\n// new redux container replaces the base class.\n// it has all the base class functionality and more.\nexport default SearchbarContainer\n","// import styles & other objects\nimport {connect} from 'react-redux'\nimport './App.css'\n// import components\nimport {Component} from 'react'\nimport Header from './Header'\nimport Searchbar from './Searchbar'\n\nclass App extends Component {\n\tconstructor () {\n\t\tsuper()\n\t\tthis.state = {'ok': null}\n\t}\n\n\trender () {return (\n\t\t<>\n\t\t\t<Header />\n\t\t\t<main>\n\t\t\t\t<Searchbar />\n\t\t\t\t<hr />\n\n\t\t\t\t<p>Search History:</p>\n\t\t\t\t<pre><code>{JSON.stringify(this.props.search.queries)}</code></pre>\n\n\t\t\t\t<p>JSON Results:</p>\n\t\t\t\t<pre><code>{JSON.stringify(this.props.search.results, null, \"\\t\")}</code></pre>\n\t\t\t</main>\n\t\t</>\n\t)}\n}\n\n/* EXTEND OBJECT INTO REDUX CONTAINER */\nconst mapStateToProps = (state) => {\n\t// create props from state\n\tconst props = {\n  \tsearch: state.search,\n\t}\n\n\t// return props\n\treturn props\n}\n\nconst AppContainer = connect(\n  mapStateToProps\n)(App)\n\nexport default AppContainer\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport './index.css'\nimport App from './components/App'\nimport {store} from './redux'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}